{
  "name": "arabic-translation-editor",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "check:lean": "npm run env:check && npm run build:validate && npm run lint && npm run type-check && npm run env:check:vercel",
    "smoke": "node scripts/smoke.mjs",
    "bundlesize": "npx next-bundle-analyzer",
    "prune": "npx depcheck",
    "ingest": "tsx scripts/ingest.ts",
    "orchestrate": "tsx orchestrate/pipeline.ts",
    "orchestrate:mcp": "node orchestrate/mcp-pipeline.mjs",
    "build:docx": "node build/docx.mjs",
    "build:audio": "node build/audio_prep.mjs",
    "build:epub": "node build/epub.mjs",
    "scale:full": "tsx scripts/scale-to-full.mjs",
    "validate:quality": "tsx scripts/quality-validation.mjs",
    "report:final": "tsx scripts/generate-final-report.ts",
    "build:metadata": "tsx -e \"import('./lib/build/git-utils.ts').then(m => console.log(JSON.stringify(m.getBuildMetadata(), null, 2)))\"",
    "build:info": "tsx -e \"import('./lib/build/git-utils.ts').then(m => m.formatBuildInfo().then(info => console.log(info)))\"",
    "build:validate": "tsx -e \"import('./lib/build/git-utils.ts').then(m => m.validateBuildEnvironment().then(valid => process.exit(valid ? 0 : 1)))\"",
    "build:analyze": "npm run build && npx @next/bundle-analyzer",
    "build:size": "npm run build && du -sh .next",
    "build:verify": "npm run build && npm run env:check:vercel",
    "pipeline": "tsx orchestrate/pipeline.ts",
    "export:docx": "node build/docx.mjs",
    "export:audio": "node build/audio_prep.mjs",
    "export:epub": "node build/epub.mjs",
    "status:dashboard": "tsx scripts/pipeline-status.ts",
    "github:setup": "node scripts/github-workflow.mjs",
    "github:auth": "gh auth login",
    "github:issues": "gh issue list",
    "github:pr": "gh pr create",
    "setup:audio": "node scripts/setup-audio.mjs",
    "test:tts": "curl -X POST http://localhost:3000/api/tts -H 'Content-Type: application/json' -d '{\"text\":\"Hello world\",\"language\":\"en\"}'",
    "review:bundle": "node scripts/review-bundle.mjs",
    "review:report": "node scripts/review-bundle.mjs --report-only",
    "deploy:preview": "node scripts/deploy/vercel.mjs --preview",
    "deploy:prod": "node scripts/deploy/vercel.mjs --prod",
    "deploy:preview:skip-build": "node scripts/deploy/vercel.mjs --preview --skip-build",
    "deploy:prod:skip-build": "node scripts/deploy/vercel.mjs --prod --skip-build",
    "deploy:dry-run": "node scripts/deploy/vercel.mjs --preview --dry-run",
    "postdeploy:prewarm": "node scripts/postdeploy/prewarm.mjs",
    "deploy:ready": "npm run env:check:prod && npm run build:validate && node scripts/scale-to-full.mjs && tsx scripts/generate-final-report.ts && npm run deploy:preview",
    "deploy:check": "npm run env:check:prod && npm run build:validate && npm run vercel:config && node scripts/deploy/vercel.mjs --dry-run",
    "deploy:optimize": "npm run build && npm run vercel:functions",
    "deploy:monitor": "npm run vercel:logs --follow",
    "monitor:start": "tsx -e \"import('./lib/monitoring/self-healing.js').then(m => m.selfHealingSystem.startMonitoring(30000))\"",
    "monitor:stop": "tsx -e \"import('./lib/monitoring/self-healing.js').then(m => m.selfHealingSystem.stopMonitoring())\"",
    "monitor:health": "tsx -e \"import('./lib/monitoring/self-healing.js').then(m => m.selfHealingSystem.runHealthChecks())\"",
    "fix:intelligent": "tsx -e \"import('./lib/auto-fix/intelligent-fixer.js').then(m => m.intelligentFixer.enable())\"",
    "fix:all": "npm run lint -- --fix && npm run type-check && npm run fix:intelligent",
    "dev:monitored": "npm run monitor:start && npm run dev",
    "dev:full": "npm run fix:all && npm run monitor:start && npm run dev",
    "dev:build-info": "npm run build:info && npm run dev",
    "dev:metadata": "npm run build:metadata && npm run dev",
    "console:ninja": "tsx -e \"import('./lib/logging/console-ninja.ts').then(m => m.logger.info('Console Ninja initialized'))\"",
    "nx:generate": "nx generate",
    "nx:run": "nx run",
    "nx:build": "nx build",
    "nx:test": "nx test",
    "nx:lint": "nx lint",
    "superdesign:start": "tsx -e \"import('./lib/superdesign/workflows.ts').then(m => m.superdesignWorkflows.startWorkflows())\"",
    "superdesign:stop": "tsx -e \"import('./lib/superdesign/workflows.ts').then(m => m.superdesignWorkflows.stopWorkflows())\"",
    "superdesign:test": "tsx -e \"import('./lib/superdesign/integration.ts').then(m => m.superdesignIntegration.connect())\"",
    "superdesign:generate": "tsx -e \"import('./lib/superdesign/utils.ts').then(m => console.log('Superdesign utils loaded'))\"",
    "vercel:config": "vercel env ls",
    "vercel:regions": "vercel --help | grep regions",
    "vercel:functions": "vercel inspect --scope functions",
    "vercel:logs": "vercel logs",
    "env:check": "node scripts/env/validate.mjs",
    "env:check:strict": "node scripts/env/validate.mjs --strict",
    "env:check:json": "node scripts/env/validate.mjs --format json",
    "env:check:prod": "tsx -e \"import('./lib/env.ts').then(m => { const result = m.validateEnvironment('production'); if (!result.success) { console.error('Environment validation failed:', result.errors); process.exit(1); } console.log('Production environment validation passed'); })\"",
    "env:check:vercel": "tsx -e \"import('./lib/env.ts').then(m => { const result = m.validateEnvironment('production'); if (!result.success) { console.error('Vercel environment validation failed:', result.errors); process.exit(1); } console.log('Vercel environment validation passed'); })\"",
    "env:setup:vercel": "vercel env add",
    "workflow:preview": "npm run check:lean && npm run deploy:preview",
    "workflow:prod": "npm run deploy:ready",
    "workflow:full": "npm run scale:full && npm run deploy:prod && npm run postdeploy:prewarm",
    "dev:deploy-test": "npm run env:check && npm run build && npm run deploy:dry-run",
    "dev:prewarm-test": "npm run postdeploy:prewarm http://localhost:3000"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.63.0",
    "@modelcontextprotocol/sdk": "^1.18.1",
    "@vercel/analytics": "^1.5.0",
    "@vercel/blob": "^2.0.0",
    "@vercel/kv": "^3.0.0",
    "@vercel/speed-insights": "^1.2.0",
    "archiver": "^7.0.1",
    "clsx": "^2.1.1",
    "docx": "^9.5.1",
    "lucide-react": "^0.544.0",
    "mammoth": "^1.8.0",
    "minimatch": "^10.0.3",
    "next": "^14.2.32",
    "node-fetch": "^3.3.2",
    "papaparse": "^5.4.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "ws": "^8.18.3",
    "zod": "^4.1.11"
  },
  "devDependencies": {
    "@types/node": "^20.16.10",
    "@types/papaparse": "^5.3.14",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.1",
    "eslint-config-next": "14.2.15",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13",
    "tsx": "^4.20.5",
    "typescript": "^5.6.2"
  },
  "engines": {
    "node": ">=20"
  }
}
