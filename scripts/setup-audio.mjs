#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.dirname(__dirname);

async function setupAudioDirectories() {
  console.log('Setting up audio directories for ElevenLabs integration...');

  const audioBaseDir = path.join(projectRoot, 'outputs', 'audio');
  const directories = [
    path.join(audioBaseDir, 'segments'),     // For individual row audio files
    path.join(audioBaseDir, 'temp'),         // For temporary files
    path.join(audioBaseDir, 'cache'),        // For cached audio
    path.join(audioBaseDir, 'notes'),        // For voice note recordings
  ];

  // Create directories
  for (const dir of directories) {
    try {
      await fs.promises.mkdir(dir, { recursive: true });
      console.log(`âœ“ Created directory: ${path.relative(projectRoot, dir)}`);
    } catch (error) {
      console.error(`âœ— Failed to create directory ${dir}:`, error.message);
    }
  }

  // Create .gitkeep files to ensure directories are tracked
  const gitkeepFiles = [
    path.join(audioBaseDir, 'segments', '.gitkeep'),
    path.join(audioBaseDir, 'temp', '.gitkeep'),
    path.join(audioBaseDir, 'cache', '.gitkeep'),
    path.join(audioBaseDir, 'notes', '.gitkeep'),
  ];

  for (const gitkeepFile of gitkeepFiles) {
    try {
      await fs.promises.writeFile(gitkeepFile, '# Audio files will be stored here\n', 'utf8');
      console.log(`âœ“ Created .gitkeep: ${path.relative(projectRoot, gitkeepFile)}`);
    } catch (error) {
      console.error(`âœ— Failed to create .gitkeep ${gitkeepFile}:`, error.message);
    }
  }

  // Create audio configuration file
  const audioConfig = {
    elevenlabs: {
      api_url: 'https://api.elevenlabs.io/v1',
      model_id: 'eleven_multilingual_v2',
      voice_settings: {
        stability: 0.4,
        similarity_boost: 0.85,
        style: 0.1,
        use_speaker_boost: true
      }
    },
    cache: {
      duration_hours: 24,
      max_file_size_mb: 10,
      cleanup_interval_hours: 6
    },
    supported_formats: ['mp3', 'wav'],
    quality_settings: {
      sample_rate: 44100,
      bitrate: 128
    }
  };

  const configPath = path.join(audioBaseDir, 'config.json');
  try {
    await fs.promises.writeFile(configPath, JSON.stringify(audioConfig, null, 2), 'utf8');
    console.log(`âœ“ Created audio configuration: ${path.relative(projectRoot, configPath)}`);
  } catch (error) {
    console.error(`âœ— Failed to create audio config:`, error.message);
  }

  // Create README for audio directory
  const readmeContent = `# Audio Files Directory

This directory contains audio files generated by the ElevenLabs TTS integration for the Dad-Mode feature.

## Directory Structure

- \`segments/\` - Individual row audio files (cached)
- \`temp/\` - Temporary audio files during processing
- \`cache/\` - General audio cache
- \`notes/\` - Voice note recordings from sticky notes

## File Naming Convention

### Segments
- Format: \`{rowId}.mp3\` or \`{textHash}.mp3\`
- Example: \`row_001.mp3\`, \`a1b2c3d4e5f6.mp3\`

### Voice Notes
- Format: \`{rowId}_{timestamp}.wav\`
- Example: \`row_001_20231215_143022.wav\`

## Cache Management

Audio files are automatically cached for ${audioConfig.cache.duration_hours} hours.
The system will automatically clean up expired files every ${audioConfig.cache.cleanup_interval_hours} hours.

## Environment Variables

Make sure these are set in your \`.env.local\`:

\`\`\`
ELEVENLABS_API_KEY=your_api_key_here
ELEVENLABS_VOICE_ID_EN=21m00Tcm4TlvDq8ikWAM
ELEVENLABS_VOICE_ID_AR=pMsXgVXv3BLzUgSXRplE
AUDIO_STORAGE_PATH=outputs/audio
AUDIO_CACHE_DURATION_HOURS=24
\`\`\`

## API Usage

### Generate TTS Audio
\`\`\`javascript
const response = await fetch('/api/tts', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    text: 'Hello world',
    language: 'en',
    rowId: 'optional_row_id'
  })
});
\`\`\`

### Access Audio Files
\`\`\`javascript
const audioUrl = '/api/audio/segments/row_001.mp3';
const audio = new Audio(audioUrl);
audio.play();
\`\`\`
`;

  const readmePath = path.join(audioBaseDir, 'README.md');
  try {
    await fs.promises.writeFile(readmePath, readmeContent, 'utf8');
    console.log(`âœ“ Created README: ${path.relative(projectRoot, readmePath)}`);
  } catch (error) {
    console.error(`âœ— Failed to create README:`, error.message);
  }

  console.log('\nðŸŽ‰ Audio setup complete!');
  console.log('\nNext steps:');
  console.log('1. Make sure your .env.local file has the ElevenLabs API key');
  console.log('2. Test the Dad-Mode audio functionality');
  console.log('3. Configure voice settings if needed');
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  setupAudioDirectories().catch(console.error);
}

export default setupAudioDirectories;